import asyncio
from datetime import datetime
from telethon import TelegramClient
from telethon.tl.types import UserStatusOnline, UserStatusOffline
import config
from colorama import init, Fore, Style
import os
import sys
import requests

init()

client = TelegramClient('session', config.API_ID, config.API_HASH)

HEADER = f"{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Style.RESET_ALL}"
FOOTER = f"{Fore.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}"
DIVIDER = f"{Fore.BLUE}‚ïë{Style.RESET_ALL} {'-' * 34} {Fore.BLUE}‚ïë{Style.RESET_ALL}"

LOG_FILE = "status_log.txt"
REPORT_FILE = "manual_report_{}.txt"

TELEGRAM_API_URL = f"https://api.telegram.org/bot{config.BOT_TOKEN}/sendMessage"

def log_to_file(message):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        f.write(f"[{timestamp}] {message}\n")

def create_manual_report():
    today = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    report_filename = REPORT_FILE.format(today)
    
    if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > 0:
        with open(LOG_FILE, "r", encoding="utf-8") as log_f:
            content = log_f.read()
        with open(report_filename, "w", encoding="utf-8") as report_f:
            report_f.write(f"–†—É—á–Ω–æ–π –æ—Ç—á—ë—Ç –∑–∞ {today}\n")
            report_f.write("=" * 40 + "\n")
            report_f.write(content)
        open(LOG_FILE, "w").close()
        print(f"{Fore.YELLOW}–°–æ–∑–¥–∞–Ω –æ—Ç—á—ë—Ç: {report_filename}{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}–õ–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.{Style.RESET_ALL}")

def send_telegram_message(message):
    payload = {
        "chat_id": config.CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    response = requests.post(TELEGRAM_API_URL, json=payload)
    if response.status_code != 200:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}{Style.RESET_ALL}")

async def handle_input():
    loop = asyncio.get_event_loop()
    while True:
        command = await loop.run_in_executor(None, sys.stdin.readline)
        command = command.strip().lower()
        if command == "report":
            create_manual_report()
        elif command == "exit":
            print(f"{Fore.CYAN}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...{Style.RESET_ALL}")
            break
        else:
            print(f"{Fore.YELLOW}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'report' –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.{Style.RESET_ALL}")

async def track_user(target):
    await client.start()

    print(HEADER)
    print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ    {Fore.BLUE}‚ïë{Style.RESET_ALL}")
    print(DIVIDER)
    log_to_file("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    send_telegram_message("üîî *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ*")

    try:
        entity = await client.get_entity(target)
        if not entity:
            error_msg = "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {error_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
            print(FOOTER)
            log_to_file(error_msg)
            send_telegram_message(f"‚ùå *{error_msg}*")
            return
    except ValueError as e:
        error_msg = f"–û—à–∏–±–∫–∞: {e}"
        print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {error_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
        print(FOOTER)
        log_to_file(error_msg)
        send_telegram_message(f"‚ùå *{error_msg}*")
        return

    username = entity.first_name or entity.username
    print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {Fore.YELLOW}{username:^20}{Style.RESET_ALL}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
    print(FOOTER)
    log_to_file(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {username}")
    send_telegram_message(f"üëÄ *–û—Ç—Å–ª–µ–∂–∏–≤–∞—é: {username}*")
    print(f"{Fore.CYAN}–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 'report'. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî 'exit'.{Style.RESET_ALL}")

    last_status = None
    online_start_time = None

    while True:
        user = await client.get_entity(entity.id)
        current_status = user.status
        now = datetime.now()

        if current_status != last_status:
            now_str = now.strftime("%Y-%m-%d %H:%M:%S")
            print(HEADER)
            if isinstance(current_status, UserStatusOnline):
                online_start_time = now
                status_msg = f"–°—Ç–∞—Ç—É—Å: {Fore.GREEN}–û–ù–õ–ê–ô–ù{Style.RESET_ALL} ‚òÖ"
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {now_str}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {status_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                log_to_file("–°—Ç–∞—Ç—É—Å: –û–ù–õ–ê–ô–ù")
                send_telegram_message(f"‚úÖ *{username} –æ–Ω–ª–∞–π–Ω* ({now_str})")
            elif isinstance(current_status, UserStatusOffline) and online_start_time:
                online_duration = now - online_start_time
                minutes = int(online_duration.total_seconds() // 60)
                seconds = int(online_duration.total_seconds() % 60)
                status_msg = f"–°—Ç–∞—Ç—É—Å: {Fore.RED}–û–§–§–õ–ê–ô–ù{Style.RESET_ALL} ‚úò"
                time_msg = f"{Fore.GREEN}–í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {minutes} –º–∏–Ω {seconds} —Å–µ–∫{Style.RESET_ALL}"
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {now_str}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {status_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {time_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                log_to_file(f"–°—Ç–∞—Ç—É—Å: –û–§–§–õ–ê–ô–ù (–í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {minutes} –º–∏–Ω {seconds} —Å–µ–∫)")
                send_telegram_message(f"‚ùå *{username} –æ—Ñ—Ñ–ª–∞–π–Ω* ({now_str})\nüïì –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
                online_start_time = None
            elif isinstance(current_status, UserStatusOffline):
                status_msg = f"–°—Ç–∞—Ç—É—Å: {Fore.RED}–û–§–§–õ–ê–ô–ù{Style.RESET_ALL} ‚úò"
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {now_str}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {status_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                log_to_file("–°—Ç–∞—Ç—É—Å: –û–§–§–õ–ê–ô–ù")
                send_telegram_message(f"‚ùå *{username} –æ—Ñ—Ñ–ª–∞–π–Ω* ({now_str})")
            else:
                status_msg = "–°—Ç–∞—Ç—É—Å: –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚ö†"
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {now_str}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                print(f"{Fore.BLUE}‚ïë{Style.RESET_ALL}  {status_msg}  {Fore.BLUE}‚ïë{Style.RESET_ALL}")
                log_to_file("–°—Ç–∞—Ç—É—Å: –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                send_telegram_message(f"‚ö† *{username}: –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω* ({now_str})")
            print(FOOTER)
            last_status = current_status

        await asyncio.sleep(5)

async def main():
    print(f"{Fore.CYAN}–ó–∞–ø—É—Å–∫ Telegram Status Tracker...{Style.RESET_ALL}")
    target = input(f"{Fore.YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567) –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username): {Style.RESET_ALL}")
    await asyncio.gather(track_user(target), handle_input())

if __name__ == "__main__":
    if os.path.exists(LOG_FILE):
        open(LOG_FILE, "w").close()
    asyncio.run(main())